options(stringsAsFactros = F)
############################数据下载############################
##选择CMD下gdc_client.exe进行下载

############################数据整理############################
#将所有文件移动到同一个文件夹SampleFiles下
dir.create("SampleFiles")
filepath <- dir(path ="D:\\TCGA\\SampleFiles",full.names = TRUE)
for(wd in filepath){
   files <-dir(path = wd,pattern="gz$")#查看满足条件文件
   fromfilepath <- paste(wd,"\\",files,sep ="")
   tofilepath <- paste("D:\\TCGA\\SampleFiles\\",files,sep ="")
   file.copy(fromfilepath.tofilepath)
}

############################解压所有文件并删除原文件############################
setwd("D:\\TCGA\\SampleFiles")
countsFiles <-dir(path ="D:\\TCGA\\SampleFiles\\",pattern="gz$")#查看满足条件文件
library(R.utils)
sapply(countsFiles, gunzip)#解压函数gunzip需要安装R.utils包

############################处理json文件############################
library(rjson)#install.packages("rjson")
metadata_json_File <- fromJSON(file="D:\\TCGA\\metadata.cart.2020-04-08.json")
json_File_Info <- data.frame(filesName = c(),TCGA_Barcode = c())
for(i in 1:length(metadata_json_File)){
    TCGA_Barcode <- metadata_json_File[[i]][["associated_entities"]][[1]][["entity_submitter_id"]]
    file_name <- metadata_json_File[[i]][["file_name"]]
    json_File_Info <- rbind(json_File_Info,data.frame(filesName = file_name,TCGA_Barcode = TCGA_Barcode))
}
rownames(json_File_Info) <- json_File_Info[,1]
write.csv(json_File_Info,file = "D:\\TCGA\\json_File_Info.csv")
  
############################获取counts矩阵############################
filesName_To_TCGA_BarcodeFile <- json_File_Info[-1]
countsFileNames<-dir(pattern="counts$")#list.files()函数也行

allSampleRawcounts <- data.frame()
for(txtFile in countsFileNames){
   #每一个循环读取一个文件
   SampleCounts <- read.table(txtFile,header =FALSE)
   rownames(SampleCounts) <- SampleCounts[,1]
   SampleCounts <- SampleCounts[-1]
   #根据filesName_To_TCGA_BarcodeFile文件中文件名称与barcode对应关系，命名列名
   colnames(SampleCounts) <- filesName_To_TCGA_BarcodeFile[paste(txtFile,".gz",sep = ""),]
   if (dim(allSampleRawCounts)[1]== 0){
     allSampleRawCounts <- SampleCounts
   }
   else
   {allSampleRawCounts<- cbind(allSampleRawCounts,SampleCounts)}
}
write.csv(allSampleRawCounts,file = "..\\RawCounts.CSV")
ensembl_id <- substr(row.names(allSampleRawCounts),1,15)
rownames(allSampleRawCounts) <- ensembl_id
#RawCounts.CS与allSampleRawCounts.CSV文件区别在于行名的ensemble去掉了版本号
write.csv(allSampleRawCounts,file = "..\\RawCounts1.CSV")


############################ID转换############################
#添加一列Ensembl_ID到RawCounts1数据框中
RawCounts <- allSampleRawCounts
Ensembl_ID <- data.frame(Ensembl_ID = row.names(RawCounts))
rownames(Ensembl_ID) <- Ensembl_ID[,1]
RawCounts1 <- cbind(Ensembl_ID,RawCounts)

#一个函数，通过gtf文件获取Ensembl_ID与基因名称的对应关系##
get_map = function(input) {
  if (is.character(input)) {
    if(!file.exists(input)) stop("Bad input file.")
    message("Treat input as file")
    input = data.table::fread(input, header = FALSE)
  } else {
    data.table::setDT(input)
  }
  
  input = input[input[[3]] == "gene", ]
  
  pattern_id = ".*gene_id \"([^;]+)\";.*"
  pattern_name = ".*gene_name \"([^;]+)\";.*"
  
  
  gene_id = sub(pattern_id, "\\1", input[[9]])
  gene_name = sub(pattern_name, "\\1", input[[9]])
  
  Ensembl_ID_TO_Genename <- data.frame(gene_id = gene_id,
                                        gene_name = gene_name,
                                        stringsAsFactors = FALSE)
  return(Ensembl_ID_TO_Genename)
}


Ensembl_ID_TO_Genename <- get_map("..\\gencode.v33lift37.annotation.gtf") 

gtf_Ensembl_ID <- substr(Ensembl_ID_TO_Genename[,1],1,15)
Ensembl_ID_TO_Genename <- data.frame(gtf_Ensembl_ID,Ensembl_ID_TO_Genename[,2])
colnames(Ensembl_ID_TO_Genename) <- c("Ensembl_ID","gene_id")
write.csv(Ensembl_ID_TO_Genename,file = "..\\Ensembl_ID_TO_Genename.csv")

#融合数据
mergeRawCounts <- merge(Ensembl_ID_TO_Genename,RawCounts1,by="Ensembl_ID")

#按照gene_id列进行排序#因为可能有多个Ensembl_ID对应同一个gene的可能
mergeRawCounts <- mergeRawCounts[order(mergeRawCounts[,"gene_id"]),]
#根据gene_id列建立索引
index<-duplicated(mergeRawCounts$gene_id)
#我们想要的那一行为FALSE，所以要取反
mergeRawCounts <- mergeRawCounts[!index,]
#利用基因名称作为行名
rownames(mergeRawCounts) <-mergeRawCounts[,"gene_id"]
# 删除前2行
BLCA_Counts_expMatrix <- mergeRawCounts[,-c(1:2)]
# 保存文件
write.csv(BLCA_Counts_expMatrix,file = "..\\BLCA_Counts_expMatrix.csv")


#############################差异分析#################################
### 读入数据,这里我们前面的变量LUAD_Counts_expMatrix就是我们要的数据???
### 所以不需要读???
## counts <- read.csv("..\\LUAD_Counts_expMatrix.csv", header = T, row.names = 1)
library(TCGAbiolinks)
# 请求数据。如果前面下载数据不是通过TCGAbiolinks包下载的话可通过该包请求数据
query <- GDCquery(project = "TCGA-LUAD",
                  data.category = "Transcriptome Profiling",
                  data.type = "Gene Expression Quantification", 
                  workflow.type = "HTSeq - Counts")
# 从query中获取结果表，它可以选择带有cols参数的列，并使用rows参数返回若干行???
# 594个barcode
samplesDown <- getResults(query,cols=c("cases"))

# 533个肿瘤样本的barcode
dataSmTP <- TCGAquery_SampleTypes(barcode = samplesDown, typesample = "TP")
# 59个正常组织的barcode
dataSmNT <- TCGAquery_SampleTypes(barcode = samplesDown,
                                  typesample = "NT")
# 重新排序样本顺序，正常组织样本在前，肿瘤样本在后，即???59列我正常样本
Counts<- data.frame(c(LUAD_Counts_expMatrix[,dataSmNT],LUAD_Counts_expMatrix[,dataSmTP]))
rownames(Counts) <-row.names(LUAD_Counts_expMatrix)
colnames(Counts) <- c(dataSmNT,dataSmTP)

# 在edgeR中，1代表control样本???2代表case样本???
# 原始数据中有592个样本，对照???59个和实验组各533个。所以我们可以创建一个分组向量???

###################方法一：edgeR
# 包的安装
# BiocManager::install( "edgeR" )
library( "edgeR" )
# 创建分组
group <- c(rep(1,59),rep(2,533))

# 创建DGEList类型变量
# 这一步相当于创建一列表。注意group中的顺序和counts中行名要对应???
# 也就是对照组和实验组要指定正确。这里前59列为control，后533列为case???
y <- DGEList(counts=Counts, group=group)

# 数据过滤
keep <- filterByExpr(y)
y <- y[keep, , keep.lib.sizes=FALSE]

# 计算标准化因???
y <- calcNormFactors(y)

# 计算离散???
y <- estimateDisp(y)
# 显著性检???
et <- exactTest(y)
# 获取排名靠前的基因，这里设置n=100000是为了输出所以基???
et <- topTags(et, n=100000)
# 转换为数据框类型
et <- as.data.frame(et)
# 将行名粘贴为数据框的第一???
et <- cbind(rownames(et),et)
# 指定列名
colnames(et) <- c("gene_id", "log2FoldChange", "log2CPM", "PValue", "FDR")
# 保存数据到本???
write.table(et, "..\\all_LUAD_DEG.xls", sep = "\t", col.names = TRUE,
            row.names = FALSE, quote = FALSE, na = "")
# 差异基因筛???
etSig <- et[which(et$PValue < 0.05 & abs(et$log2FoldChange) > 1),]
# 加入一列，up_down 体现上下调信???
etSig[which(etSig$log2FoldChange > 0), "up_down"] <- "Up"
etSig[which(etSig$log2FoldChange < 0), "up_down"] <- "Down"
# 保存文件
write.table(etSig, "..\\LUAD_DEG.xls", sep = "\t",
            col.names = TRUE, row.names = FALSE, quote = FALSE, na = "")

#####方法二：DESeq2

# 包的安装和加???
# BiocManager::install("DESeq2")
library("DESeq2")
####创建分组
# 在DESeq2中，对照组是control样本，实验组是case???
DESeq2group <- c(rep("control",59),rep("case",533))
# 创建实验分组
colData <- data.frame(row.names = names(Counts),
                      condition =factor(DESeq2group,
                      levels = c("control","case")))
# 构建DESeqDataSet对象
# 构建DESeqDataSet对象用于分析，colData指定我们的样本信息和分组列表???
# design = ~ condition表示分组信息安装colData的condition列分组???
dds <- DESeqDataSetFromMatrix(countData = Counts, colData = colData,
                              design = ~ condition)

# 函数分析差异
dds <- DESeq(dds) #这步特别慢，需6小时
# 计算标准化因???
dds2 <- dds #暂存
sizeFactors(dds)
#提取差异表达结果
res <- results(dds)
res <- as.data.frame(res)
# 添加一???
res <- cbind(rownames(res), res)
# 重命名列???
colnames(res) <- c("gene_id", "baseMean", "log2FoldChange", "lfcSE", "stat",
                   "pval", "padj")
#保存文件到本???
write.table(res, "..\\case-vs-control-all-DESeq2.gene.xls",
            sep = "\t", col.names = TRUE, row.names = FALSE, quote = FALSE,
            na = "")

# 获取差异基因

resSig <- res[which(res$pval < 0.05 & abs(res$log2FoldChange) > 1),]
resSig[which(resSig$log2FoldChange > 0), "up_down"] <- "Up"
resSig[which(resSig$log2FoldChange < 0), "up_down"] <- "Down"
write.table(resSig, "..\\case-vs-control-diff-pval-0.05-FC-2-DESeq2.gene.xls",
            sep = "\t", col.names = TRUE, row.names = FALSE, quote = FALSE, na = "")
