options(stringsAsFactros = F)
############################数据下载############################
##选择CMD下gdc_client.exe进行下载

############################数据整理############################
#将所有文件移动到同一个文件夹SampleFiles下
dir.create("SampleFiles")
filepath <- dir(path ="D:\\TCGA\\SampleFiles",full.names = TRUE)
for(wd in filepath){
   files <-dir(path = wd,pattern="gz$")#查看满足条件文件
   fromfilepath <- paste(wd,"\\",files,sep ="")
   tofilepath <- paste("D:\\TCGA\\SampleFiles\\",files,sep ="")
   file.copy(fromfilepath.tofilepath)
}

############################解压所有文件并删除原文件############################
setwd("D:\\TCGA\\SampleFiles")
countsFiles <-dir(path ="D:\\TCGA\\SampleFiles\\",pattern="gz$")#查看满足条件文件
library(R.utils)
sapply(countsFiles, gunzip)#解压函数gunzip需要安装R.utils包

############################处理json文件############################
library(rjson)#install.packages("rjson")
metadata_json_File <- fromJSON(file="D:\\TCGA\\metadata.cart.2020-04-08.json")
json_File_Info <- data.frame(filesName = c(),TCGA_Barcode = c())
for(i in 1:length(metadata_json_File)){
    TCGA_Barcode <- metadata_json_File[[i]][["associated_entities"]][[1]][["entity_submitter_id"]]
    file_name <- metadata_json_File[[i]][["file_name"]]
    json_File_Info <- rbind(json_File_Info,data.frame(filesName = file_name,TCGA_Barcode = TCGA_Barcode))
}
rownames(json_File_Info) <- json_File_Info[,1]
write.csv(json_File_Info,file = "D:\\TCGA\\json_File_Info.csv")
  
############################获取counts矩阵############################
filesName_To_TCGA_BarcodeFile <- json_File_Info[-1]
countsFileNames<-dir(pattern="counts$")#list.files()函数也行

allSampleRawcounts <- data.frame()
for(txtFile in countsFileNames){
   #每一个循环读取一个文件
   SampleCounts <- read.table(txtFile,header =FALSE)
   rownames(SampleCounts) <- SampleCounts[,1]
   SampleCounts <- SampleCounts[-1]
   #根据filesName_To_TCGA_BarcodeFile文件中文件名称与barcode对应关系，命名列名
   colnames(SampleCounts) <- filesName_To_TCGA_BarcodeFile[paste(txtFile,".gz",sep = ""),]
   if (dim(allSampleRawCounts)[1]== 0){
     allSampleRawCounts <- SampleCounts
   }
   else
   {allSampleRawCounts<- cbind(allSampleRawCounts,SampleCounts)}
}
write.csv(allSampleRawCounts,file = "..\\RawCounts.CSV")
ensembl_id <- substr(row.names(allSampleRawCounts),1,15)
rownames(allSampleRawCounts) <- ensembl_id
#RawCounts.CS与allSampleRawCounts.CSV文件区别在于行名的ensemble去掉了版本号
write.csv(allSampleRawCounts,file = "..\\RawCounts1.CSV")


############################ID转换############################
#添加一列Ensembl_ID到RawCounts1数据框中
RawCounts <- allSampleRawCounts
Ensembl_ID <- data.frame(Ensembl_ID = row.names(RawCounts))
rownames(Ensembl_ID) <- Ensembl_ID[,1]
RawCounts1 <- cbind(Ensembl_ID,RawCounts)

#一个函数，通过gtf文件获取Ensembl_ID与基因名称的对应关系##
get_map = function(input) {
  if (is.character(input)) {
    if(!file.exists(input)) stop("Bad input file.")
    message("Treat input as file")
    input = data.table::fread(input, header = FALSE)
  } else {
    data.table::setDT(input)
  }
  
  input = input[input[[3]] == "gene", ]
  
  pattern_id = ".*gene_id \"([^;]+)\";.*"
  pattern_name = ".*gene_name \"([^;]+)\";.*"
  
  
  gene_id = sub(pattern_id, "\\1", input[[9]])
  gene_name = sub(pattern_name, "\\1", input[[9]])
  
  Ensembl_ID_TO_Genename <- data.frame(gene_id = gene_id,
                                        gene_name = gene_name,
                                        stringsAsFactors = FALSE)
  return(Ensembl_ID_TO_Genename)
}


Ensembl_ID_TO_Genename <- get_map("..\\gencode.v33lift37.annotation.gtf") 

gtf_Ensembl_ID <- substr(Ensembl_ID_TO_Genename[,1],1,15)
Ensembl_ID_TO_Genename <- data.frame(gtf_Ensembl_ID,Ensembl_ID_TO_Genename[,2])
colnames(Ensembl_ID_TO_Genename) <- c("Ensembl_ID","gene_id")
write.csv(Ensembl_ID_TO_Genename,file = "..\\Ensembl_ID_TO_Genename.csv")
